import { ConfigService } from './config.service';
import { WeatherError } from './../_model/weatherError';
import { WeatherInfo } from './../_model/weatherInfo';
import { delayedRetry } from './../_helpers/HttpHelper';
import { Injectable, OnDestroy } from '@angular/core';

import { Observable, BehaviorSubject, timer, EMPTY, Subscription } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { flatMap, catchError } from 'rxjs/operators';


@Injectable({
  providedIn: 'root'
})
export class WeatherService implements  OnDestroy {

  loading = true;

  wthTimer: Subscription;
  configSub: Subscription;

  private fullWeather: BehaviorSubject<WeatherInfo>;
  private wthError: BehaviorSubject<WeatherError>;

  constructor(private http: HttpClient, private configService: ConfigService) {

    this.fullWeather = new BehaviorSubject<WeatherInfo>(null);
    this.wthError = new BehaviorSubject<WeatherError>(null);
    
    this.configSub = this.configService.configUpdated().subscribe(newConfig => {
      this.weatherTimer();
    });
  }

  getFullWeather(): Observable<WeatherInfo> {
    return this.fullWeather.asObservable();
  }

  // if any error generated by the weather service
  errorGenerated(): Observable<WeatherError> {
    return this.wthError.asObservable();
  }

  // timer that  get the weather every 5 minutes.
  private weatherTimer(): void {

    if (this.wthTimer) {
      this.wthTimer.unsubscribe();
    }

    this.wthTimer = timer(0, this.configService.getRefreshTimeMillis()).pipe(flatMap(() => this.fetchFullWeather())).subscribe(wthData => {
      this.loading = false;
      this.fullWeather.next(wthData);
    },
      weatherError => {
        this.loading = false;
        console.log('weatherError svc', weatherError);
        const wError = new WeatherError('Unexpected', 'Unexpected error', 'Timer in weather service caught error, see logs.');
        this.wthError.next(wError);
      });
  }

  private fetchFullWeather(): Observable<WeatherInfo> {
    console.log('fetchFullWeather', new Date());
    this.loading = true;
    return this.http.get<WeatherInfo>(`http://192.168.1.110:8081/web/temperature/weather/${this.configService.getCurrentCity()}/yes`).pipe(
      delayedRetry(5000, 5),
      catchError(err => {
        this.loading = false;
        const wError = new WeatherError('Retries', 'Retries failure', 'Number of retries exceeded. Cannot connect to server ');
        this.wthError.next(wError);
        return EMPTY;
      }
      )
    );

  }
  ngOnDestroy(): void {
    this.configSub.unsubscribe();
    this.wthTimer.unsubscribe();
  }

}
